{
  "id": "content-marketing-workflow",
  "name": "Automated Content Marketing Campaign",
  "nodes": [
    {
      "id": "start-node",
      "type": "manual-trigger",
      "category": "trigger",
      "parameters": {},
      "text": "Start Content Campaign"
    },
    {
      "id": "initialize-campaign",
      "type": "execute-javascript",
      "category": "utility",
      "parameters": {
        "code": "// Initialize campaign parameters\nreturn {\n  campaign: {\n    id: 'CAM-' + Math.floor(100000 + Math.random() * 900000),\n    name: 'Summer Product Launch',\n    startDate: new Date().toISOString(),\n    endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n    status: 'Active'\n  },\n  brand: {\n    name: 'EcoTech Solutions',\n    industry: 'Sustainable Technology',\n    tone: 'Professional but approachable',\n    values: ['Innovation', 'Sustainability', 'Quality']\n  },\n  product: {\n    name: 'SolarCharge Pro',\n    description: 'Portable solar-powered charging station for all your devices',\n    keyFeatures: [\n      'Charges up to 5 devices simultaneously',\n      '50% faster charging than previous models',\n      'Compact and lightweight design',\n      'Weather-resistant construction',\n      'Smart power management system'\n    ],\n    targetAudience: ['Outdoor enthusiasts', 'Remote workers', 'Eco-conscious consumers'],\n    price: 149.99,\n    launchDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000).toISOString()\n  },\n  channels: [\n    { name: 'Email', priority: 'high' },\n    { name: 'Social Media', priority: 'high' },\n    { name: 'Blog', priority: 'medium' },\n    { name: 'Press Release', priority: 'low' }\n  ],\n  contentTypes: ['announcement', 'feature highlight', 'customer testimonial', 'comparison', 'FAQ']\n};"
      },
      "text": "Initialize Campaign Data"
    },
    {
      "id": "determine-content-focus",
      "type": "random-number",
      "category": "utility",
      "parameters": {
        "min": "1",
        "max": "5"
      },
      "text": "Determine Content Focus"
    },
    {
      "id": "select-content-type",
      "type": "execute-javascript",
      "category": "utility",
      "parameters": {
        "code": "const data = inputData.context['initialize-campaign'];\nconst focusNumber = inputData.randomNumber;\n\n// Map the random number to a content type\nconst contentType = data.contentTypes[focusNumber - 1];\n\n// Select a random key feature if the content type is 'feature highlight'\nlet selectedFeature = null;\nif (contentType === 'feature highlight') {\n  const featureIndex = Math.floor(Math.random() * data.product.keyFeatures.length);\n  selectedFeature = data.product.keyFeatures[featureIndex];\n}\n\n// Select a random audience segment\nconst audienceIndex = Math.floor(Math.random() * data.product.targetAudience.length);\nconst targetAudience = data.product.targetAudience[audienceIndex];\n\nreturn {\n  ...data,\n  contentStrategy: {\n    type: contentType,\n    selectedFeature: selectedFeature,\n    targetAudience: targetAudience,\n    focusNumber: focusNumber\n  }\n};"
      },
      "text": "Select Content Type and Focus"
    },
    {
      "id": "generate-email-content",
      "type": "openai-llm",
      "category": "ai",
      "parameters": {
        "prompt": "Create marketing email content for a product with the following details:\n\nBrand: {{select-content-type.brand.name}} ({{select-content-type.brand.industry}})\nBrand Tone: {{select-content-type.brand.tone}}\nBrand Values: {{select-content-type.brand.values}}\n\nProduct: {{select-content-type.product.name}}\nDescription: {{select-content-type.product.description}}\nPrice: ${{select-content-type.product.price}}\nLaunch Date: {{select-content-type.product.launchDate}}\n\nContent Type: {{select-content-type.contentStrategy.type}}\nTarget Audience: {{select-content-type.contentStrategy.targetAudience}}\n{{#if select-content-type.contentStrategy.selectedFeature}}Featured Highlight: {{select-content-type.contentStrategy.selectedFeature}}{{/if}}\n\nYou MUST format your response as a JSON object with the following structure:\n{\n  \"subject\": \"Email subject line\",\n  \"preheader\": \"Short preview text that appears after the subject line\",\n  \"greeting\": \"Email greeting\",\n  \"mainContent\": \"Main email body content (HTML formatting allowed)\",\n  \"callToAction\": \"Clear call to action text\",\n  \"ctaButtonText\": \"Short button text\",\n  \"signoff\": \"Email sign-off\"\n}",
        "model": "gpt-3.5-turbo",
        "systemPrompt": "You are an expert marketing copywriter specializing in email campaigns. Create compelling, conversion-focused email content that aligns with the brand's tone and values while highlighting the product's benefits for the target audience. Your response MUST be formatted as a valid JSON object with the exact keys specified in the prompt. Do not include any text outside of the JSON structure.",
        "temperature": "0.7",
        "maxTokens": "600"
      },
      "text": "Generate Email Content"
    },
    {
      "id": "generate-social-content",
      "type": "openai-llm",
      "category": "ai",
      "parameters": {
        "prompt": "Create social media content for a product with the following details:\n\nBrand: {{select-content-type.brand.name}} ({{select-content-type.brand.industry}})\nBrand Tone: {{select-content-type.brand.tone}}\nBrand Values: {{select-content-type.brand.values}}\n\nProduct: {{select-content-type.product.name}}\nDescription: {{select-content-type.product.description}}\nPrice: ${{select-content-type.product.price}}\nLaunch Date: {{select-content-type.product.launchDate}}\n\nContent Type: {{select-content-type.contentStrategy.type}}\nTarget Audience: {{select-content-type.contentStrategy.targetAudience}}\n{{#if select-content-type.contentStrategy.selectedFeature}}Featured Highlight: {{select-content-type.contentStrategy.selectedFeature}}{{/if}}\n\nYou MUST format your response as a JSON object with the following structure:\n{\n  \"twitter\": \"Tweet text (max 280 characters)\",\n  \"instagram\": \"Instagram caption with hashtags\",\n  \"facebook\": \"Facebook post text\",\n  \"linkedin\": \"LinkedIn post text (professional tone)\",\n  \"hashtags\": [\"list\", \"of\", \"relevant\", \"hashtags\"],\n  \"imagePrompt\": \"A detailed description for generating an image to accompany these posts\"\n}",
        "model": "gpt-3.5-turbo",
        "systemPrompt": "You are an expert social media marketer. Create engaging, platform-appropriate content that will drive engagement and conversions. Ensure each post is optimized for its platform while maintaining brand consistency. Your response MUST be formatted as a valid JSON object with the exact keys specified in the prompt. Do not include any text outside of the JSON structure.",
        "temperature": "0.7",
        "maxTokens": "600"
      },
      "text": "Generate Social Media Content"
    },
    {
      "id": "generate-blog-outline",
      "type": "openai-llm",
      "category": "ai",
      "parameters": {
        "prompt": "Create a blog post outline for a product with the following details:\n\nBrand: {{select-content-type.brand.name}} ({{select-content-type.brand.industry}})\nBrand Tone: {{select-content-type.brand.tone}}\nBrand Values: {{select-content-type.brand.values}}\n\nProduct: {{select-content-type.product.name}}\nDescription: {{select-content-type.product.description}}\nKey Features: {{select-content-type.product.keyFeatures}}\nPrice: ${{select-content-type.product.price}}\nLaunch Date: {{select-content-type.product.launchDate}}\n\nContent Type: {{select-content-type.contentStrategy.type}}\nTarget Audience: {{select-content-type.contentStrategy.targetAudience}}\n{{#if select-content-type.contentStrategy.selectedFeature}}Featured Highlight: {{select-content-type.contentStrategy.selectedFeature}}{{/if}}\n\nYou MUST format your response as a JSON object with the following structure:\n{\n  \"title\": \"Blog post title\",\n  \"metaDescription\": \"SEO meta description (max 160 characters)\",\n  \"introduction\": \"Brief introduction paragraph\",\n  \"sections\": [\n    {\n      \"heading\": \"Section heading\",\n      \"keyPoints\": [\"Key point 1\", \"Key point 2\"]\n    }\n  ],\n  \"conclusion\": \"Brief conclusion paragraph\",\n  \"callToAction\": \"Call to action text\",\n  \"keywords\": [\"list\", \"of\", \"seo\", \"keywords\"]\n}",
        "model": "gpt-3.5-turbo",
        "systemPrompt": "You are an expert content marketer and SEO specialist. Create a comprehensive, engaging blog post outline that will rank well in search engines while providing value to readers and promoting the product. Your response MUST be formatted as a valid JSON object with the exact keys specified in the prompt. The 'sections' array should contain 3-5 sections. Do not include any text outside of the JSON structure.",
        "temperature": "0.7",
        "maxTokens": "800"
      },
      "text": "Generate Blog Post Outline"
    },
    {
      "id": "analyze-content-strategy",
      "type": "execute-javascript",
      "category": "utility",
      "parameters": {
        "code": "// Get base campaign data\nconst campaignData = inputData.context['select-content-type'];\n\n// Parse email content\nlet emailContent = { subject: 'No email content generated' };\ntry {\n  if (inputData.context['generate-email-content'] && inputData.context['generate-email-content'].generatedText) {\n    emailContent = JSON.parse(inputData.context['generate-email-content'].generatedText);\n  }\n} catch (error) {\n  console.error('Error parsing email content:', error);\n}\n\n// Parse social media content\nlet socialContent = { twitter: 'No social content generated' };\ntry {\n  if (inputData.context['generate-social-content'] && inputData.context['generate-social-content'].generatedText) {\n    socialContent = JSON.parse(inputData.context['generate-social-content'].generatedText);\n  }\n} catch (error) {\n  console.error('Error parsing social content:', error);\n}\n\n// Parse blog outline\nlet blogOutline = { title: 'No blog outline generated' };\ntry {\n  if (inputData.context['generate-blog-outline'] && inputData.context['generate-blog-outline'].generatedText) {\n    blogOutline = JSON.parse(inputData.context['generate-blog-outline'].generatedText);\n  }\n} catch (error) {\n  console.error('Error parsing blog outline:', error);\n}\n\n// Calculate estimated reach and engagement\nconst channelReach = {\n  email: Math.floor(5000 + Math.random() * 5000),\n  twitter: Math.floor(2000 + Math.random() * 8000),\n  instagram: Math.floor(3000 + Math.random() * 7000),\n  facebook: Math.floor(4000 + Math.random() * 6000),\n  linkedin: Math.floor(1000 + Math.random() * 4000),\n  blog: Math.floor(1000 + Math.random() * 3000)\n};\n\n// Calculate engagement rates based on content type\nconst contentTypeMultipliers = {\n  'announcement': 1.2,\n  'feature highlight': 1.1,\n  'customer testimonial': 1.3,\n  'comparison': 0.9,\n  'FAQ': 0.8\n};\n\nconst multiplier = contentTypeMultipliers[campaignData.contentStrategy.type] || 1.0;\n\nconst engagementRates = {\n  email: {\n    openRate: Math.min(0.45, 0.15 + (Math.random() * 0.15 * multiplier)).toFixed(2),\n    clickRate: Math.min(0.15, 0.05 + (Math.random() * 0.05 * multiplier)).toFixed(2)\n  },\n  social: {\n    engagementRate: Math.min(0.08, 0.02 + (Math.random() * 0.03 * multiplier)).toFixed(2),\n    shareRate: Math.min(0.03, 0.005 + (Math.random() * 0.01 * multiplier)).toFixed(2)\n  },\n  blog: {\n    readRate: Math.min(0.6, 0.3 + (Math.random() * 0.2 * multiplier)).toFixed(2),\n    avgTimeOnPage: Math.floor(60 + (Math.random() * 120 * multiplier))\n  }\n};\n\n// Create content calendar\nconst now = new Date();\nconst calendar = [\n  {\n    channel: 'Blog',\n    content: blogOutline.title,\n    scheduledDate: new Date(now.getTime() + 2 * 24 * 60 * 60 * 1000).toISOString(),\n    status: 'Scheduled'\n  },\n  {\n    channel: 'Email',\n    content: emailContent.subject,\n    scheduledDate: new Date(now.getTime() + 4 * 24 * 60 * 60 * 1000).toISOString(),\n    status: 'Scheduled'\n  },\n  {\n    channel: 'Twitter',\n    content: socialContent.twitter,\n    scheduledDate: new Date(now.getTime() + 5 * 24 * 60 * 60 * 1000).toISOString(),\n    status: 'Scheduled'\n  },\n  {\n    channel: 'Instagram',\n    content: socialContent.instagram,\n    scheduledDate: new Date(now.getTime() + 5 * 24 * 60 * 60 * 1000).toISOString(),\n    status: 'Scheduled'\n  },\n  {\n    channel: 'Facebook',\n    content: socialContent.facebook,\n    scheduledDate: new Date(now.getTime() + 6 * 24 * 60 * 60 * 1000).toISOString(),\n    status: 'Scheduled'\n  },\n  {\n    channel: 'LinkedIn',\n    content: socialContent.linkedin,\n    scheduledDate: new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000).toISOString(),\n    status: 'Scheduled'\n  }\n];\n\n// Calculate estimated conversions and ROI\nconst estimatedEmailOpens = Math.floor(channelReach.email * engagementRates.email.openRate);\nconst estimatedEmailClicks = Math.floor(estimatedEmailOpens * engagementRates.email.clickRate);\nconst estimatedSocialEngagements = Math.floor((channelReach.twitter + channelReach.instagram + channelReach.facebook + channelReach.linkedin) * engagementRates.social.engagementRate);\nconst estimatedBlogReads = Math.floor(channelReach.blog * engagementRates.blog.readRate);\n\nconst conversionRate = 0.02 + (Math.random() * 0.03 * multiplier);\nconst estimatedConversions = Math.floor((estimatedEmailClicks + estimatedSocialEngagements + estimatedBlogReads) * conversionRate);\nconst estimatedRevenue = estimatedConversions * campaignData.product.price;\nconst campaignCost = 2000 + Math.random() * 3000;\nconst estimatedROI = (estimatedRevenue - campaignCost) / campaignCost;\n\nreturn {\n  campaign: campaignData.campaign,\n  brand: campaignData.brand,\n  product: campaignData.product,\n  contentStrategy: campaignData.contentStrategy,\n  content: {\n    email: emailContent,\n    social: socialContent,\n    blog: blogOutline\n  },\n  analytics: {\n    reach: channelReach,\n    engagement: engagementRates,\n    estimatedEmailOpens,\n    estimatedEmailClicks,\n    estimatedSocialEngagements,\n    estimatedBlogReads,\n    estimatedConversions,\n    conversionRate: conversionRate.toFixed(3),\n    estimatedRevenue: estimatedRevenue.toFixed(2),\n    campaignCost: campaignCost.toFixed(2),\n    estimatedROI: estimatedROI.toFixed(2)\n  },\n  calendar: calendar\n};"
      },
      "text": "Analyze Content Strategy"
    },
    {
      "id": "generate-campaign-report",
      "type": "openai-llm",
      "category": "ai",
      "parameters": {
        "prompt": "Create a comprehensive marketing campaign report based on the following data:\n\nCampaign: {{analyze-content-strategy.campaign.name}}\nProduct: {{analyze-content-strategy.product.name}} - {{analyze-content-strategy.product.description}}\nContent Strategy Type: {{analyze-content-strategy.contentStrategy.type}}\nTarget Audience: {{analyze-content-strategy.contentStrategy.targetAudience}}\n\nContent Summary:\n- Email Subject: {{analyze-content-strategy.content.email.subject}}\n- Blog Title: {{analyze-content-strategy.content.blog.title}}\n- Twitter: {{analyze-content-strategy.content.social.twitter}}\n\nAnalytics Projections:\n- Email Reach: {{analyze-content-strategy.analytics.reach.email}} subscribers\n- Email Open Rate: {{analyze-content-strategy.analytics.engagement.email.openRate}}\n- Email Click Rate: {{analyze-content-strategy.analytics.engagement.email.clickRate}}\n- Social Media Reach: {{analyze-content-strategy.analytics.reach.twitter}} (Twitter), {{analyze-content-strategy.analytics.reach.instagram}} (Instagram), {{analyze-content-strategy.analytics.reach.facebook}} (Facebook), {{analyze-content-strategy.analytics.reach.linkedin}} (LinkedIn)\n- Social Engagement Rate: {{analyze-content-strategy.analytics.engagement.social.engagementRate}}\n- Blog Reach: {{analyze-content-strategy.analytics.reach.blog}} visitors\n- Blog Read Rate: {{analyze-content-strategy.analytics.engagement.blog.readRate}}\n- Estimated Conversions: {{analyze-content-strategy.analytics.estimatedConversions}}\n- Conversion Rate: {{analyze-content-strategy.analytics.conversionRate}}\n- Estimated Revenue: ${{analyze-content-strategy.analytics.estimatedRevenue}}\n- Campaign Cost: ${{analyze-content-strategy.analytics.campaignCost}}\n- Estimated ROI: {{analyze-content-strategy.analytics.estimatedROI}}\n\nContent Calendar:\n{{#each analyze-content-strategy.calendar}}\n- {{this.channel}}: Scheduled for {{this.scheduledDate}}\n{{/each}}\n\nYou MUST format your response as a JSON object with the following structure:\n{\n  \"executiveSummary\": \"Brief summary of the campaign and its projected performance\",\n  \"strengthsAndOpportunities\": [\"List of campaign strengths\"],\n  \"risksAndChallenges\": [\"List of potential risks or challenges\"],\n  \"recommendations\": [\"List of recommendations to improve campaign performance\"],\n  \"conclusionStatement\": \"Final statement about the campaign's potential impact\"\n}",
        "model": "gpt-3.5-turbo",
        "systemPrompt": "You are an expert marketing analyst. Create a data-driven, insightful campaign report that evaluates the projected performance of the marketing campaign. Identify strengths, weaknesses, and opportunities for optimization. Your response MUST be formatted as a valid JSON object with the exact keys specified in the prompt. Do not include any text outside of the JSON structure.",
        "temperature": "0.5",
        "maxTokens": "800"
      },
      "text": "Generate Campaign Report"
    },
    {
      "id": "generate-optimization-suggestions",
      "type": "openai-llm",
      "category": "ai",
      "parameters": {
        "prompt": "Based on the following marketing campaign data, provide specific optimization suggestions for each channel:\n\nCampaign: {{analyze-content-strategy.campaign.name}}\nProduct: {{analyze-content-strategy.product.name}}\nContent Strategy Type: {{analyze-content-strategy.contentStrategy.type}}\nTarget Audience: {{analyze-content-strategy.contentStrategy.targetAudience}}\n\nEmail Content:\n- Subject: {{analyze-content-strategy.content.email.subject}}\n- Preheader: {{analyze-content-strategy.content.email.preheader}}\n- CTA: {{analyze-content-strategy.content.email.callToAction}}\n\nSocial Media Content:\n- Twitter: {{analyze-content-strategy.content.social.twitter}}\n- Instagram: {{analyze-content-strategy.content.social.instagram}}\n- Facebook: {{analyze-content-strategy.content.social.facebook}}\n- LinkedIn: {{analyze-content-strategy.content.social.linkedin}}\n\nBlog Content:\n- Title: {{analyze-content-strategy.content.blog.title}}\n- Meta Description: {{analyze-content-strategy.content.blog.metaDescription}}\n\nAnalytics Projections:\n- Email Open Rate: {{analyze-content-strategy.analytics.engagement.email.openRate}}\n- Email Click Rate: {{analyze-content-strategy.analytics.engagement.email.clickRate}}\n- Social Engagement Rate: {{analyze-content-strategy.analytics.engagement.social.engagementRate}}\n- Blog Read Rate: {{analyze-content-strategy.analytics.engagement.blog.readRate}}\n- Conversion Rate: {{analyze-content-strategy.analytics.conversionRate}}\n\nYou MUST format your response as a JSON object with the following structure:\n{\n  \"emailOptimizations\": [\"List of specific suggestions to improve email performance\"],\n  \"socialMediaOptimizations\": [\"List of specific suggestions to improve social media performance\"],\n  \"blogOptimizations\": [\"List of specific suggestions to improve blog performance\"],\n  \"conversionOptimizations\": [\"List of specific suggestions to improve overall conversion rate\"],\n  \"abTestSuggestions\": [\"List of elements that should be A/B tested\"]\n}",
        "model": "gpt-3.5-turbo",
        "systemPrompt": "You are an expert marketing optimization specialist. Provide specific, actionable suggestions to improve the performance of each marketing channel based on the campaign data. Focus on practical changes that could increase engagement and conversion rates. Your response MUST be formatted as a valid JSON object with the exact keys specified in the prompt. Do not include any text outside of the JSON structure.",
        "temperature": "0.6",
        "maxTokens": "800"
      },
      "text": "Generate Optimization Suggestions"
    },
    {
      "id": "finalize-campaign",
      "type": "execute-javascript",
      "category": "utility",
      "parameters": {
        "code": "// Get campaign analysis data\nconst campaignData = inputData.context['analyze-content-strategy'];\n\n// Parse campaign report\nlet campaignReport = { executiveSummary: 'No report generated' };\ntry {\n  if (inputData.context['generate-campaign-report'] && inputData.context['generate-campaign-report'].generatedText) {\n    campaignReport = JSON.parse(inputData.context['generate-campaign-report'].generatedText);\n  }\n} catch (error) {\n  console.error('Error parsing campaign report:', error);\n}\n\n// Parse optimization suggestions\nlet optimizationSuggestions = { emailOptimizations: ['No suggestions generated'] };\ntry {\n  if (inputData.context['generate-optimization-suggestions'] && inputData.context['generate-optimization-suggestions'].generatedText) {\n    optimizationSuggestions = JSON.parse(inputData.context['generate-optimization-suggestions'].generatedText);\n  }\n} catch (error) {\n  console.error('Error parsing optimization suggestions:', error);\n}\n\n// Create final campaign package\nconst finalCampaign = {\n  campaignInfo: {\n    id: campaignData.campaign.id,\n    name: campaignData.campaign.name,\n    product: campaignData.product.name,\n    contentType: campaignData.contentStrategy.type,\n    targetAudience: campaignData.contentStrategy.targetAudience,\n    startDate: campaignData.campaign.startDate,\n    endDate: campaignData.campaign.endDate\n  },\n  content: campaignData.content,\n  calendar: campaignData.calendar,\n  projections: {\n    reach: campaignData.analytics.reach,\n    engagement: campaignData.analytics.engagement,\n    conversions: campaignData.analytics.estimatedConversions,\n    revenue: parseFloat(campaignData.analytics.estimatedRevenue),\n    roi: parseFloat(campaignData.analytics.estimatedROI)\n  },\n  report: campaignReport,\n  optimizations: optimizationSuggestions,\n  status: 'Ready for Launch',\n  generatedAt: new Date().toISOString(),\n  version: '1.0'\n};\n\n// Log campaign summary\nconsole.log('\\n===== CONTENT MARKETING CAMPAIGN =====');\nconsole.log(`Campaign: ${finalCampaign.campaignInfo.name} (${finalCampaign.campaignInfo.id})`);\nconsole.log(`Product: ${finalCampaign.campaignInfo.product}`);\nconsole.log(`Content Type: ${finalCampaign.campaignInfo.contentType}`);\nconsole.log(`Target Audience: ${finalCampaign.campaignInfo.targetAudience}`);\n\nconsole.log('\\n===== CONTENT SUMMARY =====');\nconsole.log('Email Subject: ' + finalCampaign.content.email.subject);\nconsole.log('Blog Title: ' + finalCampaign.content.blog.title);\nconsole.log('Twitter: ' + finalCampaign.content.social.twitter);\n\nconsole.log('\\n===== CAMPAIGN PROJECTIONS =====');\nconsole.log(`Estimated Reach: ${Object.values(finalCampaign.projections.reach).reduce((a, b) => a + b, 0).toLocaleString()} total impressions`);\nconsole.log(`Estimated Conversions: ${finalCampaign.projections.conversions}`);\nconsole.log(`Projected Revenue: $${finalCampaign.projections.revenue.toLocaleString()}`);\nconsole.log(`Projected ROI: ${(finalCampaign.projections.roi * 100).toFixed(1)}%`);\n\nconsole.log('\\n===== EXECUTIVE SUMMARY =====');\nconsole.log(finalCampaign.report.executiveSummary);\n\nconsole.log('\\n===== TOP OPTIMIZATION SUGGESTIONS =====');\nif (finalCampaign.optimizations.emailOptimizations && finalCampaign.optimizations.emailOptimizations.length > 0) {\n  console.log('Email: ' + finalCampaign.optimizations.emailOptimizations[0]);\n}\nif (finalCampaign.optimizations.socialMediaOptimizations && finalCampaign.optimizations.socialMediaOptimizations.length > 0) {\n  console.log('Social: ' + finalCampaign.optimizations.socialMediaOptimizations[0]);\n}\nif (finalCampaign.optimizations.blogOptimizations && finalCampaign.optimizations.blogOptimizations.length > 0) {\n  console.log('Blog: ' + finalCampaign.optimizations.blogOptimizations[0]);\n}\n\nreturn finalCampaign;"
      },
      "text": "Finalize Campaign"
    },
    {
      "id": "generate-campaign-brief",
      "type": "openai-llm",
      "category": "ai",
      "parameters": {
        "prompt": "Create a comprehensive campaign brief document for the following marketing campaign:\n\nCampaign: {{finalize-campaign.campaignInfo.name}}\nProduct: {{finalize-campaign.campaignInfo.product}}\nContent Type: {{finalize-campaign.campaignInfo.contentType}}\nTarget Audience: {{finalize-campaign.campaignInfo.targetAudience}}\nStart Date: {{finalize-campaign.campaignInfo.startDate}}\nEnd Date: {{finalize-campaign.campaignInfo.endDate}}\n\nExecutive Summary: {{finalize-campaign.report.executiveSummary}}\n\nContent Calendar:\n{{#each finalize-campaign.calendar}}\n- {{this.channel}}: Scheduled for {{this.scheduledDate}}\n{{/each}}\n\nKey Strengths:\n{{#each finalize-campaign.report.strengthsAndOpportunities}}\n- {{this}}\n{{/each}}\n\nPotential Challenges:\n{{#each finalize-campaign.report.risksAndChallenges}}\n- {{this}}\n{{/each}}\n\nOptimization Recommendations:\n{{#each finalize-campaign.optimizations.conversionOptimizations}}\n- {{this}}\n{{/each}}\n\nYou MUST format your response as a JSON object with the following structure:\n{\n  \"title\": \"Campaign brief title\",\n  \"introduction\": \"Introduction paragraph explaining the campaign purpose\",\n  \"objectives\": [\"List of campaign objectives\"],\n  \"targetAudienceAnalysis\": \"Detailed analysis of the target audience\",\n  \"contentStrategy\": \"Explanation of the content strategy approach\",\n  \"channelStrategy\": \"Explanation of the channel strategy\",\n  \"timeline\": \"Description of the campaign timeline\",\n  \"successMetrics\": [\"List of KPIs to measure success\"],\n  \"nextSteps\": [\"List of immediate next steps\"]\n}",
        "model": "gpt-3.5-turbo",
        "systemPrompt": "You are an expert marketing strategist. Create a comprehensive, professional campaign brief document that could be presented to stakeholders. The brief should clearly communicate the campaign strategy, expected outcomes, and implementation plan. Your response MUST be formatted as a valid JSON object with the exact keys specified in the prompt. Do not include any text outside of the JSON structure.",
        "temperature": "0.5",
        "maxTokens": "1000"
      },
      "text": "Generate Campaign Brief"
    },
    {
      "id": "complete-campaign",
      "type": "execute-javascript",
      "category": "utility",
      "parameters": {
        "code": "// Get finalized campaign data\nconst campaignData = inputData.context['finalize-campaign'];\n\n// Parse campaign brief\nlet campaignBrief = { title: 'No brief generated' };\ntry {\n  if (inputData.generatedText) {\n    campaignBrief = JSON.parse(inputData.generatedText);\n  }\n} catch (error) {\n  console.error('Error parsing campaign brief:', error);\n}\n\n// Create final deliverable package\nconst deliverablePackage = {\n  ...campaignData,\n  brief: campaignBrief,\n  completedAt: new Date().toISOString()\n};\n\n// Log completion message\nconsole.log('\\n===== CAMPAIGN READY FOR EXECUTION =====');\nconsole.log(`Campaign Brief: ${deliverablePackage.brief.title}`);\nconsole.log('\\nCampaign Objectives:');\ndeliverablePackage.brief.objectives.forEach(objective => {\n  console.log(`- ${objective}`);\n});\n\nconsole.log('\\nNext Steps:');\ndeliverablePackage.brief.nextSteps.forEach(step => {\n  console.log(`- ${step}`);\n});\n\nconsole.log('\\nCampaign package is ready for handoff to the marketing team.');\n\nreturn {\n  completed: true,\n  campaignId: deliverablePackage.campaignInfo.id,\n  campaignName: deliverablePackage.campaignInfo.name,\n  deliverablePackage: deliverablePackage\n};"
      },
      "text": "Complete Campaign Package"
    }
  ],
  "edges": [
    {
      "id": "edge-1",
      "startNodeId": "start-node",
      "endNodeId": "initialize-campaign"
    },
    {
      "id": "edge-2",
      "startNodeId": "initialize-campaign",
      "endNodeId": "determine-content-focus"
    },
    {
      "id": "edge-3",
      "startNodeId": "determine-content-focus",
      "endNodeId": "select-content-type"
    },
    {
      "id": "edge-4",
      "startNodeId": "select-content-type",
      "endNodeId": "generate-email-content"
    },
    {
      "id": "edge-5",
      "startNodeId": "select-content-type",
      "endNodeId": "generate-social-content"
    },
    {
      "id": "edge-6",
      "startNodeId": "select-content-type",
      "endNodeId": "generate-blog-outline"
    },
    {
      "id": "edge-7",
      "startNodeId": "generate-email-content",
      "endNodeId": "analyze-content-strategy"
    },
    {
      "id": "edge-8",
      "startNodeId": "generate-social-content",
      "endNodeId": "analyze-content-strategy"
    },
    {
      "id": "edge-9",
      "startNodeId": "generate-blog-outline",
      "endNodeId": "analyze-content-strategy"
    },
    {
      "id": "edge-10",
      "startNodeId": "analyze-content-strategy",
      "endNodeId": "generate-campaign-report"
    },
    {
      "id": "edge-11",
      "startNodeId": "analyze-content-strategy",
      "endNodeId": "generate-optimization-suggestions"
    },
    {
      "id": "edge-12",
      "startNodeId": "generate-campaign-report",
      "endNodeId": "finalize-campaign"
    },
    {
      "id": "edge-13",
      "startNodeId": "generate-optimization-suggestions",
      "endNodeId": "finalize-campaign"
    },
    {
      "id": "edge-14",
      "startNodeId": "finalize-campaign",
      "endNodeId": "generate-campaign-brief"
    },
    {
      "id": "edge-15",
      "startNodeId": "generate-campaign-brief",
      "endNodeId": "complete-campaign"
    }
  ]
}
