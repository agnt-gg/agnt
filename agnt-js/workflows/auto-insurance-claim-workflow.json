{
  "id": "auto-insurance-claim-workflow",
  "name": "Autonomous Freezer Insurance Claim",
  "nodes": [
    {
      "id": "start-node",
      "type": "manual-trigger",
      "category": "trigger",
      "parameters": {},
      "text": "Freezer Temperature Alert Triggered"
    },
    {
      "id": "initialize-incident",
      "type": "execute-javascript",
      "category": "utility",
      "parameters": {
        "code": "// Simulate a freezer temperature incident\nconst currentDate = new Date();\nconst formattedDate = currentDate.toLocaleString();\n\nreturn {\n  device: {\n    id: 'FRZ-1092384',\n    type: 'Smart Freezer',\n    model: 'CoolMax 5000',\n    manufacturer: 'FrostTech',\n    purchaseDate: '2023-01-15',\n    warrantyExpiration: '2026-01-15',\n    location: 'Kitchen',\n    owner: 'John Smith'\n  },\n  incident: {\n    timestamp: formattedDate,\n    normalTemperature: -18, // Celsius\n    detectedTemperature: -2, // Celsius\n    duration: 30, // minutes\n    threshold: -15, // Celsius\n    sensorReadings: [\n      { time: '-30 min', temp: -18 },\n      { time: '-25 min', temp: -15 },\n      { time: '-20 min', temp: -10 },\n      { time: '-15 min', temp: -5 },\n      { time: '-10 min', temp: -2 },\n      { time: '-5 min', temp: -2 },\n      { time: 'now', temp: -16 }\n    ]\n  },\n  policy: {\n    id: 'POL-78923',\n    provider: 'SafeGuard Insurance',\n    type: 'Smart Home Protection',\n    coverage: 'Appliance Malfunction',\n    deductible: 100,\n    maxCoverage: 2000,\n    status: 'Active',\n    startDate: '2023-01-20',\n    endDate: '2026-01-20'\n  },\n  claimStatus: 'Initiated'\n};"
      },
      "text": "Initialize Incident Data"
    },
    {
      "id": "verify-policy",
      "type": "execute-javascript",
      "category": "utility",
      "parameters": {
        "code": "const data = inputData;\n\n// Verify policy is active and covers this type of incident\nconst currentDate = new Date();\nconst policyEndDate = new Date(data.policy.endDate);\nconst isPolicyActive = currentDate <= policyEndDate && data.policy.status === 'Active';\n\n// Check if temperature breach exceeds threshold for claim\nconst tempThresholdExceeded = data.incident.detectedTemperature > data.incident.threshold;\nconst durationThresholdExceeded = data.incident.duration >= 15; // 15 minutes minimum\n\n// Determine if claim is valid\nconst isClaimValid = isPolicyActive && tempThresholdExceeded && durationThresholdExceeded;\n\nreturn {\n  ...data,\n  verification: {\n    isPolicyActive,\n    tempThresholdExceeded,\n    durationThresholdExceeded,\n    isClaimValid,\n    verifiedAt: new Date().toLocaleString()\n  },\n  claimStatus: isClaimValid ? 'Verified' : 'Rejected'\n};"
      },
      "text": "Verify Policy Coverage"
    },
    {
      "id": "assess-damage",
      "type": "execute-javascript",
      "category": "utility",
      "parameters": {
        "code": "const data = inputData;\n\n// Skip if claim was rejected\nif (data.claimStatus === 'Rejected') {\n  return {\n    ...data,\n    assessment: {\n      performed: false,\n      reason: 'Claim rejected during verification'\n    }\n  };\n}\n\n// Calculate risk of food spoilage based on temperature and duration\nconst maxTemp = Math.max(...data.incident.sensorReadings.map(r => r.temp));\nconst tempDelta = maxTemp - data.incident.normalTemperature;\nconst spoilageRisk = Math.min(100, Math.round((tempDelta / 20) * (data.incident.duration / 60) * 100));\n\n// Generate random value for estimated loss\nconst minLoss = 50;\nconst maxLoss = 500;\nconst estimatedLoss = Math.floor(Math.random() * (maxLoss - minLoss + 1)) + minLoss;\n\n// Determine if loss exceeds deductible\nconst exceedsDeductible = estimatedLoss > data.policy.deductible;\nconst claimAmount = exceedsDeductible ? estimatedLoss - data.policy.deductible : 0;\n\nreturn {\n  ...data,\n  assessment: {\n    performed: true,\n    spoilageRisk,\n    estimatedLoss,\n    exceedsDeductible,\n    claimAmount,\n    assessedAt: new Date().toLocaleString()\n  },\n  claimStatus: exceedsDeductible ? 'Assessed' : 'Below Deductible'\n};"
      },
      "text": "Assess Potential Damage"
    },
    {
      "id": "generate-claim-report",
      "type": "openai-llm",
      "category": "ai",
      "parameters": {
        "prompt": "Generate a detailed insurance claim report for a smart freezer temperature incident with the following details:\n\nDevice Information:\n- ID: {{assess-damage.device.id}}\n- Type: {{assess-damage.device.type}}\n- Model: {{assess-damage.device.model}}\n- Manufacturer: {{assess-damage.device.manufacturer}}\n- Purchase Date: {{assess-damage.device.purchaseDate}}\n- Warranty Expiration: {{assess-damage.device.warrantyExpiration}}\n\nIncident Details:\n- Timestamp: {{assess-damage.incident.timestamp}}\n- Normal Temperature: {{assess-damage.incident.normalTemperature}}째C\n- Detected Temperature: {{assess-damage.incident.detectedTemperature}}째C\n- Duration: {{assess-damage.incident.duration}} minutes\n- Temperature Threshold: {{assess-damage.incident.threshold}}째C\n\nPolicy Information:\n- Policy ID: {{assess-damage.policy.id}}\n- Provider: {{assess-damage.policy.provider}}\n- Type: {{assess-damage.policy.type}}\n- Coverage: {{assess-damage.policy.coverage}}\n- Deductible: ${{assess-damage.policy.deductible}}\n- Maximum Coverage: ${{assess-damage.policy.maxCoverage}}\n\nAssessment Results:\n- Spoilage Risk: {{assess-damage.assessment.spoilageRisk}}%\n- Estimated Loss: ${{assess-damage.assessment.estimatedLoss}}\n- Exceeds Deductible: {{assess-damage.assessment.exceedsDeductible}}\n- Claim Amount: ${{assess-damage.assessment.claimAmount}}\n\nClaim Status: {{assess-damage.claimStatus}}\n\nYou MUST format your response as a JSON object with the following structure:\n{\n  \"reportTitle\": \"Title of the report\",\n  \"summary\": \"Brief summary of the incident and claim\",\n  \"recommendation\": \"Recommendation for the claim\",\n  \"nextSteps\": \"Next steps for the policyholder\"\n}",
        "model": "gpt-3.5-turbo",
        "systemPrompt": "You are an automated insurance claims processing system. Generate professional, factual claim reports based on the provided data. Your response MUST be formatted as a valid JSON object with the exact keys specified in the prompt. Do not include any text outside of the JSON structure.",
        "temperature": "0.3",
        "maxTokens": "500"
      },
      "text": "Generate Claim Report"
    },
    {
      "id": "process-claim-decision",
      "type": "execute-javascript",
      "category": "utility",
      "parameters": {
        "code": "const data = inputData.context['assess-damage'];\n\n// Skip if claim was rejected or below deductible\nif (data.claimStatus === 'Rejected' || data.claimStatus === 'Below Deductible') {\n  return {\n    ...data,\n    decision: {\n      approved: false,\n      reason: data.claimStatus === 'Rejected' ? 'Claim rejected during verification' : 'Claim amount below deductible',\n      processedAt: new Date().toLocaleString()\n    },\n    claimStatus: data.claimStatus\n  };\n}\n\n// Process claim decision based on assessment\nconst isApproved = data.assessment.performed && \n                  data.assessment.exceedsDeductible && \n                  data.assessment.claimAmount <= data.policy.maxCoverage;\n\n// Generate claim ID if approved\nconst claimId = isApproved ? 'CLM-' + Math.floor(100000 + Math.random() * 900000) : null;\n\n// Parse AI-generated report\nlet report = { reportTitle: 'Claim Report', summary: 'No summary available', recommendation: 'No recommendation', nextSteps: 'No next steps' };\ntry {\n  if (inputData.generatedText) {\n    report = JSON.parse(inputData.generatedText);\n  }\n} catch (error) {\n  console.error('Error parsing AI report:', error);\n}\n\nreturn {\n  ...data,\n  report,\n  decision: {\n    approved: isApproved,\n    claimId,\n    approvedAmount: isApproved ? data.assessment.claimAmount : 0,\n    reason: isApproved ? 'Claim approved based on policy coverage and assessment' : 'Claim denied',\n    processedAt: new Date().toLocaleString()\n  },\n  claimStatus: isApproved ? 'Approved' : 'Denied'\n};"
      },
      "text": "Process Claim Decision"
    },
    {
      "id": "generate-notification",
      "type": "openai-llm",
      "category": "ai",
      "parameters": {
        "prompt": "Generate a notification message to the policyholder about their smart freezer insurance claim with the following details:\n\nDevice: {{process-claim-decision.device.type}} ({{process-claim-decision.device.model}})\nIncident: Temperature rose to {{process-claim-decision.incident.detectedTemperature}}째C for {{process-claim-decision.incident.duration}} minutes\nClaim Status: {{process-claim-decision.claimStatus}}\n{{#if process-claim-decision.decision.approved}}Approved Amount: ${{process-claim-decision.decision.approvedAmount}}{{/if}}\n\nReport Summary: {{process-claim-decision.report.summary}}\nNext Steps: {{process-claim-decision.report.nextSteps}}\n\nYou MUST format your response as a JSON object with the following structure:\n{\n  \"subject\": \"Email subject line\",\n  \"greeting\": \"Greeting to the policyholder\",\n  \"mainContent\": \"Main content of the notification\",\n  \"closingStatement\": \"Closing statement\",\n  \"smsVersion\": \"A condensed version of the message suitable for SMS (160 characters max)\"\n}",
        "model": "gpt-3.5-turbo",
        "systemPrompt": "You are an automated insurance notification system. Generate clear, concise, and professional notifications to policyholders about their claims. Your response MUST be formatted as a valid JSON object with the exact keys specified in the prompt. Do not include any text outside of the JSON structure.",
        "temperature": "0.4",
        "maxTokens": "400"
      },
      "text": "Generate Notification"
    },
    {
      "id": "finalize-claim",
      "type": "execute-javascript",
      "category": "utility",
      "parameters": {
        "code": "const data = inputData.context['process-claim-decision'];\n\n// Parse notification content\nlet notification = { subject: 'Claim Notification', greeting: 'Dear Policyholder', mainContent: 'Your claim has been processed.', closingStatement: 'Thank you.', smsVersion: 'Your claim has been processed.' };\ntry {\n  if (inputData.generatedText) {\n    notification = JSON.parse(inputData.generatedText);\n  }\n} catch (error) {\n  console.error('Error parsing notification:', error);\n}\n\n// Create final claim record\nconst finalClaim = {\n  claimId: data.decision.claimId || 'N/A',\n  policyId: data.policy.id,\n  deviceId: data.device.id,\n  incidentDate: data.incident.timestamp,\n  verificationDate: data.verification.verifiedAt,\n  assessmentDate: data.assessment.performed ? data.assessment.assessedAt : 'N/A',\n  decisionDate: data.decision.processedAt,\n  status: data.claimStatus,\n  approvedAmount: data.decision.approvedAmount || 0,\n  notification,\n  report: data.report,\n  finalizedAt: new Date().toLocaleString()\n};\n\n// Log the claim details\nconsole.log('\\n===== AUTONOMOUS INSURANCE CLAIM =====');\nconsole.log(`Claim ID: ${finalClaim.claimId}`);\nconsole.log(`Status: ${finalClaim.status}`);\nconsole.log(`Device: ${data.device.type} (${data.device.model})`);\nconsole.log(`Incident: Temperature rose to ${data.incident.detectedTemperature}째C for ${data.incident.duration} minutes`);\n\nif (data.decision.approved) {\n  console.log(`Approved Amount: $${data.decision.approvedAmount}`);\n}\n\nconsole.log('\\n===== NOTIFICATION TO POLICYHOLDER =====');\nconsole.log(`Subject: ${notification.subject}`);\nconsole.log(`${notification.greeting},\\n`);\nconsole.log(notification.mainContent);\nconsole.log(`\\n${notification.closingStatement}`);\nconsole.log('\\nSMS: ' + notification.smsVersion);\n\nreturn finalClaim;"
      },
      "text": "Finalize Claim"
    }
  ],
  "edges": [
    {
      "id": "edge-1",
      "startNodeId": "start-node",
      "endNodeId": "initialize-incident"
    },
    {
      "id": "edge-2",
      "startNodeId": "initialize-incident",
      "endNodeId": "verify-policy"
    },
    {
      "id": "edge-3",
      "startNodeId": "verify-policy",
      "endNodeId": "assess-damage"
    },
    {
      "id": "edge-4",
      "startNodeId": "assess-damage",
      "endNodeId": "generate-claim-report",
      "condition": "not_equals",
      "if": "{{assess-damage.claimStatus}}",
      "value": "Rejected"
    },
    {
      "id": "edge-5",
      "startNodeId": "assess-damage",
      "endNodeId": "process-claim-decision",
      "condition": "equals",
      "if": "{{assess-damage.claimStatus}}",
      "value": "Rejected"
    },
    {
      "id": "edge-6",
      "startNodeId": "assess-damage",
      "endNodeId": "process-claim-decision",
      "condition": "equals",
      "if": "{{assess-damage.claimStatus}}",
      "value": "Below Deductible"
    },
    {
      "id": "edge-7",
      "startNodeId": "generate-claim-report",
      "endNodeId": "process-claim-decision"
    },
    {
      "id": "edge-8",
      "startNodeId": "process-claim-decision",
      "endNodeId": "generate-notification"
    },
    {
      "id": "edge-9",
      "startNodeId": "generate-notification",
      "endNodeId": "finalize-claim"
    }
  ]
}
